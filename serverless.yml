service: dorametrix

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region:  ${opt:region, 'eu-north-1'}
  memorySize: ${opt:memory, 1024}
  timeout: 10
  logRetentionInDays: 7
  versionFunctions: false
  deploymentBucket:
    blockPublicAccess: true
    maxPreviousDeploymentArtifacts: 5
    serverSideEncryption: AES256
  stackTags:
    Usage: ${self:service}
  tags:
    Usage: ${self:service}
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    API_KEY: "TODO" # EDIT THIS TO YOUR VALUE
    REGION: ${self:provider.region}
    TABLE_NAME: ${self:custom.config.tableName}

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-iam-roles-per-function

package:
  individually: true
  patterns:
    - node_modules/aws-sdk/**
    - node_modules/aws-lambda/**

custom:
  config:
    authToken: 'something' # Your choice, see for example https://www.uuidgenerator.net for getting a UUID v4
    accountNumber: '123412341234'
    tableName: gitmetrix # TODO change to dorametrix
  aws:
    databaseArn: "arn:aws:dynamodb:${self:provider.region}:${self:custom.config.accountNumber}:table/${self:custom.config.tableName}"
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'npm'
    excludeFiles: src/**/*.test.js

functions:
  Authorizer:
    handler: src/infrastructure/adapters/web/AuthorizerController.handler
    description: ${self:service} authorizer
  MetricsController:
    handler: src/infrastructure/adapters/web/MetricsController.handler
    description: Get all four DORA metrics
    events:
      - http:
          method: GET
          path: /metrics
          authorizer:
            name: Authorizer
            resultTtlInSeconds: 30 # See: https://forum.serverless.com/t/api-gateway-custom-authorizer-caching-problems/4695
            identitySource: method.request.header.Authorization
            type: request
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: ${self:custom.aws.databaseArn}
  EventController:
    handler: src/infrastructure/adapters/web/EventController.handler
    description: Report new event (this will then be automatically also created as a change, deployment, or incident)
    events:
      - http:
          method: POST
          path: /event
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
        Resource: ${self:custom.aws.databaseArn}
  LastDeploymentController:
    handler: src/infrastructure/adapters/web/LastDeploymentController.handler
    description: Get commit ID for last production deployment
    events:
      - http:
          method: GET
          path: /lastdeployment
          authorizer:
            name: Authorizer
            resultTtlInSeconds: 30 # See: https://forum.serverless.com/t/api-gateway-custom-authorizer-caching-problems/4695
            identitySource: method.request.header.Authorization
            type: request
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: ${self:custom.aws.databaseArn}

resources:
  Resources:
    # DynamoDB
    DorametrixTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.config.tableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
    # API Gateway
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    AuthFailureExpiredGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureUnauthorizedGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'